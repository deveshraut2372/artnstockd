package com.zplus.ArtnStockMongoDB.service.impl;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.zplus.ArtnStockMongoDB.configuration.UniqueNumber;
import com.zplus.ArtnStockMongoDB.dao.*;
import com.zplus.ArtnStockMongoDB.dto.req.CheckArtProductReq;
import com.zplus.ArtnStockMongoDB.dto.req.TempArtProductReq;
import com.zplus.ArtnStockMongoDB.dto.res.SeeAllProductRes;
import com.zplus.ArtnStockMongoDB.dto.res.TempArtProductMasterRes;
import com.zplus.ArtnStockMongoDB.dto.res.TempArtProductMasterResDto;
import com.zplus.ArtnStockMongoDB.dto.res.TempArtProductRes;
import com.zplus.ArtnStockMongoDB.model.*;
import com.zplus.ArtnStockMongoDB.service.TempArtProductService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class TempArtProductServiceImpl implements TempArtProductService {


    @Autowired
    private TempArtProductMasterDao tempArtProductMasterDao;

    @Autowired
    private UserDao userDao;

    @Autowired
    private ProductMasterDao productMasterDao;

//    @Autowired
//    private ArtProductMasterDao artProductMasterDao ;

    @Autowired
    private ProductMainCategoryDao productMainCategoryDao;

    @Autowired
    private ProductSubCategoryDao productSubCategoryDao;

    @Autowired
    private ProductSubSubCategoryDao productSubSubCategoryDao;

    @Autowired
    private ProductStyleRepository productStyleRepository;

    @Autowired
    private ProductColorRepository  productColorRepository;

    @Autowired
    private SizeAndPriceRepository sizeAndPriceRepository;





//    @Override
//    public Boolean createTempArtProductMaster(TempArtProductReq tempArtProductReq) {
//        Boolean flag=false;
//        int i = 0;
//        List list = new ArrayList();
//        System.out.println("  tempArtProductReq =="+tempArtProductReq.toString());
//
//        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
//        TempArtProductMaster tempArtProductMaster1=new TempArtProductMaster();
//
////        ArtProductMaster artProductMaster1=new ArtProductMaster();
////        ArtProductMaster artProductMaster = new ArtProductMaster();
//
//        ProductMaster productMaster = new ProductMaster();
//        productMaster.setProductId(tempArtProductReq.getProductId());
//        tempArtProductMaster.setProductMaster(productMaster);
//
//        UserMaster userMaster = new UserMaster();
//        userMaster.setUserId(tempArtProductReq.getUserId());
//
//        AddDetailsMaster addDetailsMaster=new AddDetailsMaster();
//        addDetailsMaster.setArtDetailsId(tempArtProductReq.getArtDetailsId());
//
//        tempArtProductMaster.setAddDetailsMaster(addDetailsMaster);
//        tempArtProductMaster.setUserMaster(userMaster);
//        tempArtProductMaster.setCanvasSize(tempArtProductReq.getCanvasSize());
//        tempArtProductMaster.setCanvasX(tempArtProductReq.getCanvasX());
//        tempArtProductMaster.setCanvasY(tempArtProductReq.getCanvasY());
//        tempArtProductMaster.setImages(tempArtProductReq.getImages());
//        tempArtProductMaster.setDate(new Date());
//        tempArtProductMaster.setStatus("Active");
//        //   artname on productname
//
////        ArtMaster artMaster = new ArtMaster();
////        artMaster.setArtId(artProductReqDto.getArtId());
////        artProductMaster.setArtMaster(artMaster);
//
//        tempArtProductMaster.setDate(new Date());
//        tempArtProductMaster.setStatus("Active");
//        tempArtProductMaster.setQty(1);
//
//        userMaster = userDao.getUserMaster(tempArtProductReq.getUserId());
//        System.out.println("markupPer.."+userMaster.getMarkupPer());
//        productMaster = productMasterDao.getProductId(tempArtProductReq.getProductId());
//        System.out.println("basePrice..."+productMaster.getSizeAndPrices().get(i).getBasePrice());
//
//        for (SizeAndPrice sizeAndPrice : productMaster.getSizeAndPrices()) {
//            sizeAndPrice.setSize(productMaster.getSizeAndPrices().get(i).getSize());
//            sizeAndPrice.setBasePrice(productMaster.getSizeAndPrices().get(i).getBasePrice());
//
//            System.out.println("basePrice..."+productMaster.getSizeAndPrices().get(i).getBasePrice());
//            System.out.println("markupPer.."+userMaster.getMarkupPer());
//            System.out.println("  i ==="+i);
//            Double aa = productMaster.getSizeAndPrices().get(i).getBasePrice() * userMaster.getMarkupPer() / 100;
//            System.out.println("aa.."+aa);
//            Double sellPrice = productMaster.getSizeAndPrices().get(i).getBasePrice() + aa;
//            sizeAndPrice.setSellPrice(sellPrice);
//
//            list.add(sizeAndPrice);
//        }
//        tempArtProductMaster.setSizeAndPrices(list);
//        tempArtProductMaster.setTempArtProductName(tempArtProductReq.getTempArtProductName());
//        tempArtProductMaster.setTempArtProductName(tempArtProductMaster.getTempArtProductName()+"_"+productMaster.getProductName());
////        BeanUtils.copyProperties(tempArtProductReq, tempArtProductMaster);
//        System.out.println("  Temp Master ="+tempArtProductMaster);
//        tempArtProductMaster.setStatus("Active");
//        tempArtProductMaster.setDate(new Date());
//
//        ///////////////////////////////////////////////////////////
//
//
//
//
//
//
//        try {
//            tempArtProductMaster1=tempArtProductMasterDao.save(tempArtProductMaster);
//            flag= true;
//        } catch (Exception e) {
//            e.printStackTrace();
//            flag= false;
//        }
//        String artProductNo = UniqueNumber.generateUniqueNumber();
//        System.out.println("artProductNo: " + artProductNo);
//        try {
//            Optional<TempArtProductMaster> optionalTempArtProductMaster = tempArtProductMasterDao.findByTempArtProductId(tempArtProductMaster1.getTempArtProductId());
//            if (optionalTempArtProductMaster.isPresent()) {
//                TempArtProductMaster master = optionalTempArtProductMaster.get();
//                master.setArtProductUniqueNo(artProductNo);
//                TempArtProductMaster tempArtProductMaster2=tempArtProductMasterDao.save(master);
////                ArtProductMaster artProductMaster2 = artProductMasterDao.save(master);
//                System.out.println("tempArtProductMaster2: " + tempArtProductMaster2.getArtProductUniqueNo());
//                flag = true;
//            } else {
//                flag = false;
//            }
//            return flag;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return flag;
//    }

///////////////////////////////// ''''''''''''''''///////////////////

//    @Override
//    public Boolean createTempArtProductMaster(TempArtProductReq tempArtProductReq) {
//        Boolean flag=false;
//        int i = 0;
//        List list = new ArrayList();
//        System.out.println("  tempArtProductReq =="+tempArtProductReq.toString());
//
//        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
//        TempArtProductMaster tempArtProductMaster1=new TempArtProductMaster();
//
//        ProductMaster productMaster = new ProductMaster();
//        productMaster.setProductId(tempArtProductReq.getProductId());
//        tempArtProductMaster.setProductMaster(productMaster);
//
//        UserMaster userMaster = new UserMaster();
//        userMaster.setUserId(tempArtProductReq.getUserId());
//
//        AddDetailsMaster addDetailsMaster=new AddDetailsMaster();
//        addDetailsMaster.setArtDetailsId(tempArtProductReq.getArtDetailsId());
//
//        tempArtProductMaster.setAddDetailsMaster(addDetailsMaster);
//        tempArtProductMaster.setUserMaster(userMaster);
//        tempArtProductMaster.setCanvasSize(tempArtProductReq.getCanvasSize());
//        tempArtProductMaster.setCanvasX(tempArtProductReq.getCanvasX());
//        tempArtProductMaster.setCanvasY(tempArtProductReq.getCanvasY());
////        tempArtProductMaster.setImages(tempArtProductReq.getImages());
//        tempArtProductMaster.setDate(new Date());
//        tempArtProductMaster.setStatus("Active");
//
//        tempArtProductMaster.setDate(new Date());
//        tempArtProductMaster.setStatus("Active");
//        tempArtProductMaster.setQty(1);
//
//////////////////////////////////////////////////////////////////////////////
//        ProductMainCategoryMaster productMainCategoryMaster=productMainCategoryDao.findById(tempArtProductReq.getProductMainCategoryId()).get();
//        tempArtProductMaster.setProductMainCategoryMaster(productMainCategoryMaster);
//        ProductSubCategoryMaster productSubCategoryMaster=productSubCategoryDao.findById(tempArtProductReq.getProductSubCategoryId()).get();
//        tempArtProductMaster.setProductSubCategoryMaster(productSubCategoryMaster);
//
//
//        List<ProductSubSubCategory> productSubSubCategoryList=new ArrayList<>();
//        List<ProductStyle> productStyleList=new ArrayList<>();
//        List<ProductColor> productColorList=new ArrayList<>();
//        List<SizeAndPrice> sizeAndPriceList=new ArrayList<>();
//
//
//        tempArtProductReq.getProductSubSubCategoryIds().stream().forEach(productSubSubCategoryId ->{
//                ProductSubSubCategory productSubSubCategory=productSubSubCategoryDao.findById(productSubSubCategoryId).get();
//                productSubSubCategoryList.add(productSubSubCategory);
//        });
//        tempArtProductMaster.setProductSubSubCategoryList(productSubSubCategoryList);
//
//        tempArtProductReq.getProductStyleIds().stream().forEach(productStyleId ->{
//            ProductStyle productStyle=productStyleRepository.findById(productStyleId).get();
//            productStyleList.add(productStyle);
//        });
//        tempArtProductMaster.setProductStyleList(productStyleList);
//
//
//        tempArtProductReq.getArtProductColorReqList().stream().forEach(artProductColorReq ->
//        {
//            ProductColor productColor=productColorRepository.findById(artProductColorReq.getProductColorId()).get();
//            if(artProductColorReq.getProductImage()==null){
//                productColor.setArtproductImage(productColor.getProductImage());
//            }
//            productColor.setArtproductImage(artProductColorReq.getProductImage());
//            productColorList.add(productColor);
//        });
//        tempArtProductMaster.setProductColorList(productColorList);
//
//        tempArtProductReq.getArtProductColorReqList().stream().forEach(artProductColorReq ->{
//            List<SizeAndPrice> sizeAndPriceList1=sizeAndPriceRepository.findAllByProductColorId(artProductColorReq.getProductColorId());
//            sizeAndPriceList.addAll(sizeAndPriceList1);
//        });
//        tempArtProductMaster.setSizeAndPrices(sizeAndPriceList);
//
//
//        userMaster = userDao.getUserMaster(tempArtProductReq.getUserId());
//        System.out.println("markupPer.."+userMaster.getMarkupPer());
//        productMaster = productMasterDao.getProductId(tempArtProductReq.getProductId());
//        System.out.println("basePrice..."+productMaster.getSizeAndPrices().get(i).getBasePrice());
//
//
//        tempArtProductMaster.setSizeAndPrices(list);
//        tempArtProductMaster.setTempArtProductName(tempArtProductReq.getTempArtProductName());
//        tempArtProductMaster.setTempArtProductName(tempArtProductMaster.getTempArtProductName()+"_"+productMaster.getProductName());
////        BeanUtils.copyProperties(tempArtProductReq, tempArtProductMaster);
//        System.out.println("  Temp Master ="+tempArtProductMaster);
//        tempArtProductMaster.setStatus("Active");
//        tempArtProductMaster.setDate(new Date());
//
//        ///////////////////////////////////////////////////////////
//
//        try {
//            tempArtProductMaster1=tempArtProductMasterDao.save(tempArtProductMaster);
//            flag= true;
//        }catch (Exception e) {
//            e.printStackTrace();
//            flag= false;
//        }
//
//        String artProductNo = UniqueNumber.generateUniqueNumber();
//        System.out.println("artProductNo: " + artProductNo);
//        try {
//            Optional<TempArtProductMaster> optionalTempArtProductMaster = tempArtProductMasterDao.findByTempArtProductId(tempArtProductMaster1.getTempArtProductId());
//            if (optionalTempArtProductMaster.isPresent()) {
//                TempArtProductMaster master = optionalTempArtProductMaster.get();
//                master.setArtProductUniqueNo(artProductNo);
//                TempArtProductMaster tempArtProductMaster2=tempArtProductMasterDao.save(master);
////                ArtProductMaster artProductMaster2 = artProductMasterDao.save(master);
//                System.out.println("tempArtProductMaster2: " + tempArtProductMaster2.getArtProductUniqueNo());
//                flag = true;
//            } else {
//                flag = false;
//            }
//            return flag;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return flag;
//    }

    ////////////////////////////////////////////////////////////////////////////////

    @Override
    public Boolean createTempArtProductMaster(TempArtProductReq tempArtProductReq) {
        Boolean flag=false;
        int i = 0;
        List list = new ArrayList();
        System.out.println("  tempArtProductReq =="+tempArtProductReq.toString());

        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
        TempArtProductMaster tempArtProductMaster1=new TempArtProductMaster();

        ProductMaster productMaster = new ProductMaster();
        productMaster.setProductId(tempArtProductReq.getProductId());
        tempArtProductMaster.setProductMaster(productMaster);

        UserMaster userMaster = new UserMaster();
        userMaster.setUserId(tempArtProductReq.getUserId());
        tempArtProductMaster.setUserMaster(userMaster);

        if(tempArtProductReq.getArtDetailsId()!=null) {
            AddDetailsMaster addDetailsMaster = new AddDetailsMaster();
            addDetailsMaster.setArtDetailsId(tempArtProductReq.getArtDetailsId());
            tempArtProductMaster.setAddDetailsMaster(addDetailsMaster);
        }

        tempArtProductMaster.setUserMaster(userMaster);
        tempArtProductMaster.setCanvasSize(tempArtProductReq.getCanvasSize());
        tempArtProductMaster.setCanvasX(tempArtProductReq.getCanvasX());
        tempArtProductMaster.setCanvasY(tempArtProductReq.getCanvasY());
//        tempArtProductMaster.setImages(tempArtProductReq.getImages());
        tempArtProductMaster.setDate(new Date());
        tempArtProductMaster.setStatus("Active");
        tempArtProductMaster.setQty(1);

        ProductMainCategoryMaster productMainCategoryMaster=productMainCategoryDao.findById(tempArtProductReq.getProductMainCategoryId()).get();
        tempArtProductMaster.setProductMainCategoryMaster(productMainCategoryMaster);
        ProductSubCategoryMaster productSubCategoryMaster=productSubCategoryDao.findById(tempArtProductReq.getProductSubCategoryId()).get();
        tempArtProductMaster.setProductSubCategoryMaster(productSubCategoryMaster);

        ProductSubSubCategory productSubSubCategory=new ProductSubSubCategory();
        productSubSubCategory=productSubSubCategoryDao.findById(tempArtProductReq.getProductSubSubCategoryId()).get();
        tempArtProductMaster.setProductSubSubCategory(productSubSubCategory);

        tempArtProductMaster.setTempArtProductName(tempArtProductReq.getTempArtProductName());
        System.out.println("  tempArtProductReq "+tempArtProductReq.getTempArtProductName());
        tempArtProductMaster.setTempArtProductName(productMaster.getProductName());
//        BeanUtils.copyProperties(tempArtProductReq, tempArtProductMaster);
        System.out.println("  Temp Master ="+tempArtProductMaster);
        tempArtProductMaster.setStatus("Active");
        tempArtProductMaster.setDate(new Date());

        String artProductNo = UniqueNumber.generateUniqueNumber();
        System.out.println("artProductNo: " + artProductNo);
        tempArtProductMaster.setArtProductUniqueNo(artProductNo);


        List<ProductSubSubCategory> productSubSubCategoryList=new ArrayList<>();
        Set<ProductStyle> productStyleList=new HashSet<>();
        Set<ProductColor> productColorList=new HashSet<>();
        Set<SizeAndPrice> sizeAndPriceList=new HashSet<>();


        if(tempArtProductReq.getTempArtProductId()!=null)
        {
            System.out.println("  id is Present = " );
            tempArtProductMaster=tempArtProductMasterDao.findByTempArtProductId(tempArtProductReq.getTempArtProductId()).get();

            ProductStyle productStyle = new ProductStyle();
            productStyle = productStyleRepository.findById(tempArtProductReq.getProductStyleId()).get();

            productStyleList= tempArtProductMaster.getProductStyleList();
            productStyleList.add(productStyle);

            tempArtProductMaster.setProductStyleList(productStyleList);

            productColorList=tempArtProductMaster.getProductColorList();

            for (String productColorId : tempArtProductReq.getProductColorId()) {
                ProductColor productColor = productColorRepository.findById(productColorId).get();
                Set<SizeAndPrice> sizeAndPriceList1 = new HashSet<>();
                sizeAndPriceList1 = sizeAndPriceRepository.getAllByProductColorId(productColor.getProductColorId());
                productColor.setSizeAndPrices( sizeAndPriceList1);
                productColorList.add(productColor);
            }
            tempArtProductMaster.setProductColorList(productColorList);

        }else{

            ProductStyle productStyle = new ProductStyle();
            productStyle = productStyleRepository.findById(tempArtProductReq.getProductStyleId()).get();
            productStyleList.add(productStyle);
            tempArtProductMaster.setProductStyleList(productStyleList);

            for (String productColorId : tempArtProductReq.getProductColorId()) {
                ProductColor productColor=productColorRepository.findById(productColorId).get();

                Set<SizeAndPrice> sizeAndPriceList1=sizeAndPriceRepository.getAllByProductColorId(productColor.getProductColorId());
                sizeAndPriceList.addAll(sizeAndPriceList1);
                productColor.setSizeAndPrices(sizeAndPriceList);
                productColorList.add(productColor);
            }
            tempArtProductMaster.setProductColorList(productColorList);
        }


        try {

            tempArtProductMaster1=tempArtProductMasterDao.save(tempArtProductMaster);
            flag= true;
        }catch (Exception e) {
            e.printStackTrace();
            flag= false;
        }

        return flag;
    }


    @Override
    public Boolean updateTempArtProductMaster(TempArtProductReq tempArtProductReq) {
        Boolean flag=false;
        int i = 0;
        List list = new ArrayList();
        System.out.println("  tempArtProductReq =="+tempArtProductReq.toString());

        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
        TempArtProductMaster tempArtProductMaster1=new TempArtProductMaster();

        ProductMaster productMaster = new ProductMaster();
        productMaster.setProductId(tempArtProductReq.getProductId());
        tempArtProductMaster.setProductMaster(productMaster);

        UserMaster userMaster = new UserMaster();
        userMaster.setUserId(tempArtProductReq.getUserId());
        tempArtProductMaster.setUserMaster(userMaster);

        if(tempArtProductReq.getArtDetailsId()!=null) {
            AddDetailsMaster addDetailsMaster = new AddDetailsMaster();
            addDetailsMaster.setArtDetailsId(tempArtProductReq.getArtDetailsId());
            tempArtProductMaster.setAddDetailsMaster(addDetailsMaster);
        }

        tempArtProductMaster.setUserMaster(userMaster);
        tempArtProductMaster.setCanvasSize(tempArtProductReq.getCanvasSize());
        tempArtProductMaster.setCanvasX(tempArtProductReq.getCanvasX());
        tempArtProductMaster.setCanvasY(tempArtProductReq.getCanvasY());
//        tempArtProductMaster.setImages(tempArtProductReq.getImages());
        tempArtProductMaster.setDate(new Date());
        tempArtProductMaster.setStatus("Active");
        tempArtProductMaster.setQty(1);

        ProductMainCategoryMaster productMainCategoryMaster=productMainCategoryDao.findById(tempArtProductReq.getProductMainCategoryId()).get();
        tempArtProductMaster.setProductMainCategoryMaster(productMainCategoryMaster);
        ProductSubCategoryMaster productSubCategoryMaster=productSubCategoryDao.findById(tempArtProductReq.getProductSubCategoryId()).get();
        tempArtProductMaster.setProductSubCategoryMaster(productSubCategoryMaster);

        ProductSubSubCategory productSubSubCategory=new ProductSubSubCategory();
        productSubSubCategory=productSubSubCategoryDao.findById(tempArtProductReq.getProductSubSubCategoryId()).get();
        tempArtProductMaster.setProductSubSubCategory(productSubSubCategory);

        tempArtProductMaster.setTempArtProductName(tempArtProductReq.getTempArtProductName());
        System.out.println("  tempArtProductReq "+tempArtProductReq.getTempArtProductName());
        tempArtProductMaster.setTempArtProductName(productMaster.getProductName());
//        BeanUtils.copyProperties(tempArtProductReq, tempArtProductMaster);
        System.out.println("  Temp Master ="+tempArtProductMaster);
        tempArtProductMaster.setStatus("Active");
        tempArtProductMaster.setDate(new Date());

        String artProductNo = UniqueNumber.generateUniqueNumber();
        System.out.println("artProductNo: " + artProductNo);
        tempArtProductMaster.setArtProductUniqueNo(artProductNo);


        Set<ProductSubSubCategory> productSubSubCategoryList=new HashSet<>();
        Set<ProductStyle> productStyleList=new HashSet<>();
        Set<ProductColor> productColorList=new HashSet<>();
        Set<SizeAndPrice> sizeAndPriceList=new HashSet<>();


        if(tempArtProductReq.getTempArtProductId()!=null)
        {
            log.info("  data is present ");
            tempArtProductMaster=tempArtProductMasterDao.findByTempArtProductId(tempArtProductReq.getTempArtProductId()).get();

            tempArtProductMaster.setCanvasX(tempArtProductReq.getCanvasX());
            tempArtProductMaster.setCanvasY(tempArtProductReq.getCanvasY());
            tempArtProductMaster.setCanvasSize(tempArtProductReq.getCanvasSize());

            ProductStyle productStyle = new ProductStyle();
            productStyle = productStyleRepository.findById(tempArtProductReq.getProductStyleId()).get();

            productStyleList=tempArtProductMaster.getProductStyleList();

            List<String> styleNames=productStyleList.parallelStream().map(productStyle1 -> {return productStyle1.getStyleName(); }).collect(Collectors.toList());
            Boolean styleflag=styleNames.contains(productStyle.getStyleName());

            if(!styleNames.contains(productStyle.getStyleName()))
            {
                productStyleList.add(productStyle);
            }

            tempArtProductMaster.setProductStyleList(productStyleList);

            productColorList=tempArtProductMaster.getProductColorList();

            if(!styleflag) {
                for (String productColorId : tempArtProductReq.getProductColorId()) {
                    ProductColor productColor = productColorRepository.findById(productColorId).get();
                    Set<SizeAndPrice> sizeAndPriceList1 = new HashSet<>();
                    sizeAndPriceList1 = sizeAndPriceRepository.getAllByProductColorId(productColor.getProductColorId());
                    productColor.setSizeAndPrices(sizeAndPriceList1);
                    productColorList.add(productColor);
                }
            }
            tempArtProductMaster.setProductColorList(productColorList);
        }else{
            ProductStyle productStyle = new ProductStyle();
            productStyle = productStyleRepository.findById(tempArtProductReq.getProductStyleId()).get();
            productStyleList.add(productStyle);
            tempArtProductMaster.setProductStyleList(productStyleList);

            for (String productColorId : tempArtProductReq.getProductColorId()) {
                ProductColor productColor=productColorRepository.findById(productColorId).get();

                Set<SizeAndPrice> sizeAndPriceList1=sizeAndPriceRepository.getAllByProductColorId(productColor.getProductColorId());
                sizeAndPriceList.addAll(sizeAndPriceList1);
                productColor.setSizeAndPrices(sizeAndPriceList);
                productColorList.add(productColor);
            }
            tempArtProductMaster.setProductColorList(productColorList);
        }

        try {
            tempArtProductMaster1=tempArtProductMasterDao.save(tempArtProductMaster);
            flag= true;
        }catch (Exception e) {
            e.printStackTrace();
            flag= false;
        }
        return flag;
    }



//    @Override
//    public Boolean updateTempArtProductMaster(TempArtProductReq tempArtProductReq) {
//        Boolean flag=false;
//        int i = 0;
//        List list = new ArrayList();
//
//        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
//        TempArtProductMaster tempArtProductMaster1=new TempArtProductMaster();
//
////        ArtProductMaster artProductMaster1=new ArtProductMaster();
////        ArtProductMaster artProductMaster = new ArtProductMaster();
//
//        ProductMaster productMaster = new ProductMaster();
//        productMaster.setProductId(tempArtProductReq.getProductId());
//        tempArtProductMaster.setProductMaster(productMaster);
//
//        AddDetailsMaster addDetailsMaster=new AddDetailsMaster();
//        addDetailsMaster.setArtDetailsId(tempArtProductReq.getArtDetailsId());
//
//        tempArtProductMaster.setAddDetailsMaster(addDetailsMaster);
//        UserMaster userMaster = new UserMaster();
//        userMaster.setUserId(tempArtProductReq.getUserId());
//        tempArtProductMaster.setUserMaster(userMaster);
//        tempArtProductMaster.setCanvasSize(tempArtProductReq.getCanvasSize());
//        tempArtProductMaster.setCanvasX(tempArtProductReq.getCanvasX());
//        tempArtProductMaster.setCanvasY(tempArtProductReq.getCanvasY());
////        tempArtProductMaster.setImages(tempArtProductReq.getImages());
//
//        //   artname on productname
//
////        ArtMaster artMaster = new ArtMaster();
////        artMaster.setArtId(artProductReqDto.getArtId());
////        artProductMaster.setArtMaster(artMaster);
//
//        tempArtProductMaster.setDate(new Date());
//        tempArtProductMaster.setStatus("Active");
//        tempArtProductMaster.setQty(1);
//
//        userMaster = userDao.getUserMaster(tempArtProductReq.getUserId());
//        System.out.println("markupPer.."+userMaster.getMarkupPer());
//        productMaster = productMasterDao.getProductId(tempArtProductReq.getProductId());
//        System.out.println("basePrice..."+productMaster.getSizeAndPrices().get(i).getBasePrice());
//
//        for (SizeAndPrice sizeAndPrice : productMaster.getSizeAndPrices()) {
//            sizeAndPrice.setSize(productMaster.getSizeAndPrices().get(i).getSize());
//            sizeAndPrice.setBasePrice(productMaster.getSizeAndPrices().get(i).getBasePrice());
//
//            System.out.println("basePrice..."+productMaster.getSizeAndPrices().get(i).getBasePrice());
//            System.out.println("markupPer.."+userMaster.getMarkupPer());
//            System.out.println("  i ==="+i);
//            Double aa = productMaster.getSizeAndPrices().get(i).getBasePrice() * userMaster.getMarkupPer() / 100;
//            System.out.println("aa.."+aa);
//            Double sellPrice = productMaster.getSizeAndPrices().get(i).getBasePrice() + aa;
//            sizeAndPrice.setSellPrice(sellPrice);
//
//            list.add(sizeAndPrice);
//        }
//        tempArtProductMaster.setSizeAndPrices(list);
//        tempArtProductMaster.setTempArtProductName(tempArtProductReq.getTempArtProductName());
//        tempArtProductMaster.setTempArtProductName(tempArtProductMaster.getTempArtProductName()+"_"+productMaster.getProductName());
//        BeanUtils.copyProperties(tempArtProductReq, tempArtProductMaster);
//        tempArtProductMaster.setTempArtProductId(tempArtProductReq.getTempArtProductId());
//        try {
//            tempArtProductMaster1=tempArtProductMasterDao.save(tempArtProductMaster);
//            flag= true;
//        } catch (Exception e) {
//            e.printStackTrace();
//            flag= false;
//        }
//        String artProductNo = UniqueNumber.generateUniqueNumber();
//        System.out.println("artProductNo: " + artProductNo);
//        try {
//            Optional<TempArtProductMaster> optionalTempArtProductMaster = tempArtProductMasterDao.findByTempArtProductId(tempArtProductMaster1.getTempArtProductId());
//            if (optionalTempArtProductMaster.isPresent()) {
//                TempArtProductMaster master = optionalTempArtProductMaster.get();
//                master.setArtProductUniqueNo(artProductNo);
//                TempArtProductMaster tempArtProductMaster2=tempArtProductMasterDao.save(master);
////                ArtProductMaster artProductMaster2 = artProductMasterDao.save(master);
//                System.out.println("tempArtProductMaster2: " + tempArtProductMaster2.getArtProductUniqueNo());
//                flag = true;
//            } else {
//                flag = false;
//            }
//            return flag;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return flag;
//    }

    @Override
    public Boolean DeleteTempArtProductIdData(String tempArtProductId) {
        try
        {
            tempArtProductMasterDao.deleteById(tempArtProductId);
            return true;
        }catch (Exception e)
        {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public Boolean checkArtProductIsCreate(CheckArtProductReq checkArtProductReq) {
        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
//        tempArtProductMaster=tempArtProductMasterDao.checkArtProductIdCreate(checkArtProductReq.getProductId(),checkArtProductReq.getArtDetailsId());
        tempArtProductMaster=tempArtProductMasterDao.findByProductMaster_ProductIdAndAddDetailsMaster_ArtDetailsId(checkArtProductReq.getProductId(),checkArtProductReq.getArtDetailsId());
        if(tempArtProductMaster==null)
            return false;
        else
            return true;
    }

    @Override
    public TempArtProductRes getArtProductIsCreate(CheckArtProductReq checkArtProductReq) {
        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
//        tempArtProductMaster=tempArtProductMasterDao.checkArtProductIdCreate(checkArtProductReq.getProductId(),checkArtProductReq.getArtDetailsId());
        tempArtProductMaster=tempArtProductMasterDao.findByProductMaster_ProductIdAndAddDetailsMaster_ArtDetailsId(checkArtProductReq.getProductId(),checkArtProductReq.getArtDetailsId());

        TempArtProductRes tempArtProductRes=new TempArtProductRes();
        BeanUtils.copyProperties(tempArtProductMaster,tempArtProductRes);
        tempArtProductRes.setProductId(tempArtProductMaster.getProductMaster().getProductId());
        tempArtProductRes.setArtDetailsId(tempArtProductMaster.getAddDetailsMaster().getArtDetailsId());
        tempArtProductRes.setUserId(tempArtProductMaster.getUserMaster().getUserId());
        return tempArtProductRes;
    }



    @Override
    public List<TempArtProductMaster> getTempProductByProductId(String productId,String productSubCategoryId,String userId) {
        List<TempArtProductMaster> tempArtProductMasterList=new ArrayList<>();
        tempArtProductMasterList=tempArtProductMasterDao.findAllByProductMaster_ProductIdAndProductSubCategoryMaster_ProductSubCategoryIdAndUserMaster_UserIdAndStatus(productId,productSubCategoryId,userId,"Active");
        return tempArtProductMasterList;

    }

    @Override
    public TempArtProductMasterRes getTempArtProductByProductIdAndSubCategory(String productSubSubCategoryId, String userId) {

        TempArtProductMasterRes tempArtProductMasterRes=new TempArtProductMasterRes();

        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
        tempArtProductMaster=tempArtProductMasterDao.findByProductSubSubCategory_productSubSubCategoryIdAndUserMaster_UserId(productSubSubCategoryId,userId);

        if(tempArtProductMaster!=null) {
            tempArtProductMasterRes.setTempArtProductMaster(tempArtProductMaster);
            tempArtProductMasterRes.setFlag(true);
        }else {
            tempArtProductMasterRes.setTempArtProductMaster(tempArtProductMaster);
            tempArtProductMasterRes.setFlag(false);
        }

        return tempArtProductMasterRes;
    }


    @Override
    public Boolean getTempArtProductByProductIdAndSubCategoryExitOrNot(String productSubSubCategoryId, String userId) {
        TempArtProductMaster tempArtProductMaster=new TempArtProductMaster();
        tempArtProductMaster=tempArtProductMasterDao.findByProductSubSubCategory_productSubSubCategoryIdAndUserMaster_UserId(productSubSubCategoryId,userId);

        if(tempArtProductMaster!=null) {
           return true;
        }else {
            return false;
        }
    }

    @Override
    public TempArtProductMasterResDto getTempArtProductByArtDetailsId(String artDetailsId, String userId) {

        TempArtProductMasterResDto tempArtProductMasterResDto=new TempArtProductMasterResDto();

        List<TempArtProductMaster> tempArtProductMasterList=new ArrayList<>();
        tempArtProductMasterList=tempArtProductMasterDao.findAllByAddDetailsMaster_artDetailsIdAndUserMaster_UserId(artDetailsId,userId);

        System.out.println(" size 1= "+tempArtProductMasterList.size());

        ProductMainCategoryMaster productMainCategoryMaster=new ProductMainCategoryMaster();

        ProductSubCategoryMaster productSubCategoryMaster=new ProductSubCategoryMaster();

        Set<ProductSubSubCategory> productSubSubCategorySet=new HashSet<>();

        Set<ProductStyle> productStyleSet=new HashSet<>();

        Set<ProductColor> productColorSet=new HashSet<>();

        Set<SizeAndPrice> sizeAndPriceSet=new HashSet<>();

        for (TempArtProductMaster tempArtProductMaster : tempArtProductMasterList) {

            if(tempArtProductMaster.getProductMainCategoryMaster()!=null)
            {
                productMainCategoryMaster=tempArtProductMaster.getProductMainCategoryMaster();
                System.out.println("  productMainCategoryMaster ="+productMainCategoryMaster);
            }


            if(tempArtProductMaster.getProductSubCategoryMaster()!=null)
            {
                productSubCategoryMaster=tempArtProductMaster.getProductSubCategoryMaster();
                System.out.println("  productSubCategoryMaster ="+productSubCategoryMaster);
            }

            if(tempArtProductMaster.getProductSubSubCategory()!=null)
            {
                productSubSubCategorySet.add(tempArtProductMaster.getProductSubSubCategory());
            }

            if(tempArtProductMaster.getProductStyleList()!=null)
            {
                productStyleSet.addAll(tempArtProductMaster.getProductStyleList());
            }

            if(tempArtProductMaster.getProductColorList()!=null)
            {
                productColorSet.addAll(tempArtProductMaster.getProductColorList());
            }

            if(tempArtProductMaster.getSizeAndPriceList()!=null)
            {
                sizeAndPriceSet.addAll(tempArtProductMaster.getSizeAndPriceList());
            }
        }

        tempArtProductMasterResDto.setProductMainCategoryMaster(productMainCategoryMaster);
        tempArtProductMasterResDto.setProductSubCategoryMaster(productSubCategoryMaster);
        tempArtProductMasterResDto.setProductStyleSet(productStyleSet);
        tempArtProductMasterResDto.setProductSubSubCategorySet(productSubSubCategorySet);

        if(!sizeAndPriceSet.isEmpty())
        {
            tempArtProductMasterResDto.setBasePrice(sizeAndPriceSet.stream().findFirst().get().getBasePrice());
            tempArtProductMasterResDto.setMarkup(sizeAndPriceSet.stream().findFirst().get().getMarkup());
        }

        Set<ProductColor> standardColors=new HashSet<>();
        Set<ProductColor> neonColors=new HashSet<>();

        List<String> scolor=new ArrayList<>();
        List<String> ncolor=new ArrayList<>();

        productColorSet.parallelStream().forEach(productColor ->{
            if(productColor.getColorType().equalsIgnoreCase("Standard"))
            {
                if(!scolor.contains(productColor.getColorCode())){
                standardColors.add(productColor);
                scolor.add(productColor.getColorCode());
                }

            }else if(productColor.getColorType().equalsIgnoreCase("Neon")) {

                if(!ncolor.contains(productColor.getColorCode())) {
                    neonColors.add(productColor);
                    ncolor.add(productColor.getColorCode());
                }

            }
        });


        tempArtProductMasterResDto.setStandardColorSet(standardColors);
        tempArtProductMasterResDto.setNeonColorSet(neonColors);
//        tempArtProductMasterResDto.setProductColorSet(productColorSet);
        tempArtProductMasterResDto.setSizeAndPriceSet(sizeAndPriceSet);



        return tempArtProductMasterResDto;
    }

    @Override
    public TempArtProductMasterResDto getTempArtProductByArtDetailsIds(String artDetailsId, String userId, String productStyleId) {

        TempArtProductMasterResDto tempArtProductMasterResDto=new TempArtProductMasterResDto();

        ProductStyle productStyle=new ProductStyle();
        productStyle=productStyleRepository.findById(productStyleId).get();

        List<TempArtProductMaster> tempArtProductMasterList=new ArrayList<>();
        tempArtProductMasterList=tempArtProductMasterDao.findAllByAddDetailsMaster_artDetailsIdAndUserMaster_UserId(artDetailsId,userId);

        System.out.println(" size 1= "+tempArtProductMasterList.size());

        ProductMainCategoryMaster productMainCategoryMaster=new ProductMainCategoryMaster();

        ProductSubCategoryMaster productSubCategoryMaster=new ProductSubCategoryMaster();

        Set<ProductSubSubCategory> productSubSubCategorySet=new HashSet<>();

        Set<ProductStyle> productStyleSet=new HashSet<>();

        Set<ProductColor> productColorSet=new HashSet<>();

        Set<SizeAndPrice> sizeAndPriceSet=new HashSet<>();

        for (TempArtProductMaster tempArtProductMaster : tempArtProductMasterList) {
            if(tempArtProductMaster.getProductMainCategoryMaster()!=null)
            {
                productMainCategoryMaster=tempArtProductMaster.getProductMainCategoryMaster();
                System.out.println("  productMainCategoryMaster ="+productMainCategoryMaster);
            }


            if(tempArtProductMaster.getProductSubCategoryMaster()!=null)
            {
                productSubCategoryMaster=tempArtProductMaster.getProductSubCategoryMaster();
                System.out.println("  productSubCategoryMaster ="+productSubCategoryMaster);
            }

            if(tempArtProductMaster.getProductSubSubCategory()!=null)
            {
                productSubSubCategorySet.add(tempArtProductMaster.getProductSubSubCategory());
            }

            if(tempArtProductMaster.getProductStyleList()!=null)
            {
                productStyleSet.addAll(tempArtProductMaster.getProductStyleList());
            }

//            if(tempArtProductMaster.getProductColorList()!=null)
//            {
//                productColorSet= (Set<ProductColor>) productColorRepository.findAllByProductStyleId(productStyleId);
////                productColorSet.addAll(tempArtProductMaster.getProductColorList());
//                productColorSet.addAll(tempArtProductMaster.getProductColorList().stream().map(productColor ->
//                {
//                    if(productColor.getProductStyleId()==productStyleId)
//                    {
//                        return productColor;
//                    }else {
//                        return null;
//                    }
//                }).collect(Collectors.toSet()));
//            }

            productColorSet.addAll(productColorRepository.findAllByProductStyleId(productStyleId));


            if(tempArtProductMaster.getSizeAndPriceList()!=null)
            {
                sizeAndPriceSet.addAll(tempArtProductMaster.getSizeAndPriceList());
            }
        }

        tempArtProductMasterResDto.setProductMainCategoryMaster(productMainCategoryMaster);
        tempArtProductMasterResDto.setProductSubCategoryMaster(productSubCategoryMaster);
        tempArtProductMasterResDto.setProductStyleSet(productStyleSet);
        tempArtProductMasterResDto.setProductSubSubCategorySet(productSubSubCategorySet);

        if(!sizeAndPriceSet.isEmpty())
        {
            tempArtProductMasterResDto.setBasePrice(sizeAndPriceSet.stream().findFirst().get().getBasePrice());
            tempArtProductMasterResDto.setMarkup(sizeAndPriceSet.stream().findFirst().get().getMarkup());
        }

        Set<ProductColor> standardColors=new HashSet<>();
        Set<ProductColor> neonColors=new HashSet<>();

        List<String> scolor=new ArrayList<>();
        List<String> ncolor=new ArrayList<>();

        productColorSet.parallelStream().forEach(productColor ->{
            if(productColor.getColorType().equalsIgnoreCase("Standard"))
            {
                if(!scolor.contains(productColor.getColorCode())){
                    standardColors.add(productColor);
                    scolor.add(productColor.getColorCode());
                }

            }else if(productColor.getColorType().equalsIgnoreCase("Neon")) {

                if(!ncolor.contains(productColor.getColorCode())) {
                    neonColors.add(productColor);
                    ncolor.add(productColor.getColorCode());
                }

            }
        });


        tempArtProductMasterResDto.setStandardColorSet(standardColors.stream().sorted(Comparator.comparingInt(ProductColor::getIndex)).collect(Collectors.toCollection(LinkedHashSet::new)));
        tempArtProductMasterResDto.setNeonColorSet(neonColors.stream().sorted(Comparator.comparingInt(ProductColor::getIndex)).collect(Collectors.toCollection(LinkedHashSet::new)));
//        tempArtProductMasterResDto.setProductColorSet(productColorSet);
        tempArtProductMasterResDto.setSizeAndPriceSet(sizeAndPriceSet);


        return tempArtProductMasterResDto;
    }


    // pending working
    @Override
    public SeeAllProductRes getSeeAllProductsCount(String artDetailsId, String userId) {
        SeeAllProductRes seeAllProductRes=new SeeAllProductRes();
        return seeAllProductRes;
    }



    @Override
    public List getActiveTempArtProductMaster() {

        return tempArtProductMasterDao.findAllByStatus("Active");
    }

    @Override
    public List getAllTempArtProductMaster() {
        return tempArtProductMasterDao.findAll();
    }

    @Override
    public TempArtProductMaster getTempArtProductIdData(String tempArtProductId) {
        return tempArtProductMasterDao.findById(tempArtProductId).get();
    }

    @Override
    public List getAllTempArtProductIdByUserIdData(String userId) {
        List list=tempArtProductMasterDao.findAllByUserMaster_UserId(userId);
        return list;
    }


}
